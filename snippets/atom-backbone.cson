# CoffeeScript Snippets

".source.coffee":

  "CoffeeScript: Backbone Template":
    "prefix": "template"
    "body": """
    template = _.template \"\"\"
      <div>
        ${1}
      </div>
    \"\"\"
    """

  "CoffeeScript: Backbone History":
    "prefix": "history"
    "body": """
    Backbone.history.start(${1:pushState: yes, root: "/public/search/"})
    """

  "CoffeeScript: Backbone Model":
    "prefix": "model"
    "body": """
    class ${1}Model extends Backbone.Model

      defaults:
        ${2:# defaults}

      initialize: ${3:(args...)}->
        ${4:super}

    """

  "CoffeeScript: Backbone View":
    "prefix": "view"
    "body": """
    class ${1}View extends Backbone.View

      ${2:el: $ "#element"}

      ${3:events:}

      initialize: ${4:(args...)}->
        ${5:super}

    """

  "CoffeeScript: Backbone ModelView":
    "prefix": "modelview"
    "body": """
    class ${1}ModelView extends Backbone.View

      template: _.template $("script#${2:template}").html()

      ${3:events:}

      initialize: ${4:(args...)}->
        ${5:super}
        @listenTo @model, "change", @render
        @listenTo @model, "destroy", @remove

      render: ->
        @setTemplate @template @model.toJSON()
        this

    """

  "CoffeeScript: Backbone Collection":
    "prefix": "collection"
    "body": """
    class ${1}Collection extends Backbone.Collection

      model: ${2}Model

      initialize: ${3:(args...)}->
        ${4:super}

    """

  "CoffeeScript: Backbone Collection View":
    "prefix": "collectionview"
    "body": """
    class ${1}CollectionView extends Backbone.View

      ${2:el: $ "#element"}

      initialize: ${3:(args...)}->

        ${4:@collection} = ${5:new }Collection

        @listenTo @collection, 'add'  , @addOne
        @listenTo @collection, 'reset', @addAll
        @listenTo @collection, 'all'  , @render

      addOne: (${6:item})->
        view = new ${7}View model: ${8:item}
        @$el.append view.render().el

      addAll: ->
        @collection.each @addOne, this

      render: ->
        ${9:// render}
        this

    """

  "CoffeeScript: Backbone Router":
    "prefix": "router"
    "body": """
    class ${1}Router extends Backbone.Router

      routes:
        "/": "main"
        ${2:# routes}

      initialize: ${3:(args...)}->
        ${4:super}

      main: ()->
        ${3:# main}

    """

  "CoffeeScript: Backbone View for AMD":
    "prefix": "defview"
    "body": """
    define [
      'jquery'
      'underscore'
      'backbone'

      'text!templates/${1:template_path.html}'
    ], ($, _, Backbone, ${2:template}) ->

      view${3: # delete this and press tab}

    """

  "CoffeeScript: Backbone View for CommonJS":
    "prefix": "expview"
    "body": """
    $        = require "jquery"
    _        = require "underscore"
    Backbone = require "backbone"
    ${1:template} = require "./templates/${2:template_path.html}"

    module.exports = view{3: # delete this and press tab}

    """

  "CoffeeScript: Backbone Model for AMD":
    "prefix": "defmodel"
    "body": """
    define [
      'underscore'
      'backbone'
      ${1:'dep'}
    ], (_, Backbone${2:, dep}) ->

      model{3: # delete this and press tab}

    """

  "CoffeeScript: Backbone Model for CommonJS":
    "prefix": "expmodel"
    "body": """
    _        = require "underscore"
    Backbone = require "backbone"

    module.exports = model{1: # delete this and press tab}

    """

  "CoffeeScript: Backbone Collection for AMD":
    "prefix": "defcollection"
    "body": """
    define [
      'underscore'
      'backbone'
      ${1:'dep'}
    ], (_, Backbone${2:, dep}) ->

      collection${1: # delete this and press tab}

    """

  "CoffeeScript: Backbone Collection for CommonJS":
    "prefix": "expcollection"
    "body": """
    _        = require "underscore"
    Backbone = require "backbone"

    module.exports = collection${1: # delete this and press tab}

    """

  "CoffeeScript: Backbone Router for AMD":
    "prefix": "defrouter"
    "body": """
    define [
      'jquery'
      'underscore'
      'backbone'
      ${1:'dep'}
    ], ($, _, Backbone${2:, dep}) ->

      router${1: # delete this and press tab}

    """

  "CoffeeScript: Backbone Router for CommonJS":
    "prefix": "exprouter"
    "body": """
    $        = require "jquery"
    _        = require "underscore"
    Backbone = require "backbone"

    module.exports = router${1: # delete this and press tab}

    """

# JavaScript Snippets

".source.js":

  "JavaScript: Backbone Template":
    "prefix": "template"
    "body": """
    template = _.template([
      "<div>",
        "${1}",
      "</div>"
    ].join("")),
    """

  "JavaScript: Backbone History":
    "prefix": "history"
    "body": """
    Backbone.history.start(${1:{pushState: true, root: "/public/search/"}})
    """

  "JavaScript: Super Class":
    "prefix": "super"
    "body": """
    ${1:Backbone.Class}.prototype.${2:method}.apply(this, arguments);
    """

  "JavaScript: Backbone Model":
    "prefix": "model"
    "body": """
    ${1:Model} = Backbone.Model.extend({

      defaults: {
        ${2:// defaults}
      },

      initialize: function (${3:args}) {
        ${4:// super}
      }

    });
    """

  "JavaScript: Backbone View":
    "prefix": "view"
    "body": """
    ${1}View = Backbone.View.extend({

      ${2:el: "#element",}

      initialize: function (${3:args}) {
        ${4:// super}
      }

    });
    """

  "JavaScript: Backbone ModelView":
    "prefix": "modelview"
    "body": """
    ${1}View = Backbone.View.extend({

      template: _.template($("script#${2:template}").html())

      initialize: function (${3:args}) {
        ${4:// super}
      },

      render: function () {
        this.setTemplate(this.template(this.model.toJSON()));
        return this
      }

    });
    """

  "JavaScript: Backbone Collection":
    "prefix": "collection"
    "body": """
    ${1}Collection = Backbone.Collection.extend({

      model: ${2}Model,

      initialize: function (${3:args}) {
        ${4:// super}
      }

    });
    """

  "JavaScript: Backbone Collection View":
    "prefix": "collectionview"
    "body": """
    ${1}CollectionView = Backbone.View.extend({

      ${2:el: $("#element"),}

      initialize: function (${3:args}) {

        ${4:this.collection} = ${5:new }Collection();

        this.listenTo(this.collection, 'add'  , this.addOne);
        this.listenTo(this.collection, 'reset', this.addAll);
        this.listenTo(this.collection, 'all'  , this.render);

      },

      addOne: function (${6:item}) {
        var view = new ${7}View({model: ${8:item}});
        this.$el.append(view.render().el);
      },

      addAll: function () {
        this.collection.each(this.addOne, this);
      },

      render: function () {
        ${9:// render}
        return this;
      }

    });
    """

  "JavaScript: Backbone Router":
    "prefix": "router"
    "body": """
    ${1}Router = Backbone.Router.extend({

      routes: {
        "/": "main"
        ${2:// routes}
      },

      initialize: function (${3:args}) {
        ${4:// super}
      },

      main: function () {
        ${3:// main}
      }

    });
    """

  "JavaScript: Backbone View for AMD":
    "prefix": "defview"
    "body": """
    define([
      'jquery',
      'underscore',
      'backbone',

      'text!templates/${1:template_path.html}'
    ], function ($, _, Backbone, ${2:template}) {

      return view${3: // delete this and press tab}

    });
    """

  "JavaScript: Backbone View for CommonJS":
    "prefix": "expview"
    "body": """
    var $        = require "jquery"
    var _        = require "underscore"
    var Backbone = require "backbone"

    module.exports = view${1: // delete this and press tab}

    """

  "JavaScript: Backbone Model for AMD":
    "prefix": "defmodel"
    "body": """
    define([
      'underscore',
      'backbone',
      ${1:'dep'}
    ], function (_, Backbone${2:, dep}) {

      return model${3: // delete this and press tab}

    });
    """

  "JavaScript: Backbone Model for CommonJS":
    "prefix": "expmodel"
    "body": """
    var _        = require "underscore"
    var Backbone = require "backbone"

    module.exports = model${1: // delete this and press tab}

    """

  "JavaScript: Backbone Collection for AMD":
    "prefix": "defcollection"
    "body": """
    define([
      'underscore',
      'backbone',
      ${1:'dep'}
    ], function (_, Backbone${2:, dep}) {

      return collection${3: // delete this and press tab}

    });
    """

  "JavaScript: Backbone Model for CommonJS":
    "prefix": "expcollection"
    "body": """
    var _        = require "underscore"
    var Backbone = require "backbone"

    module.exports = collection${1: // delete this and press tab}

    """

  "JavaScript: Backbone Router for AMD":
    "prefix": "defrouter"
    "body": """
    define([
      'jquery'
      'underscore'
      'backbone'
      ${1:'dep'}
    ], function ($, _, Backbone${2:, dep}) {

      return router${3: // delete this and press tab}

    });
    """

  "JavaScript: Backbone Router for CommonJS":
    "prefix": "exprouter"
    "body": """
    var $        = require "jquery"
    var _        = require "underscore"
    var Backbone = require "backbone"

    module.exports = router${1: // delete this and press tab}

    """

# Template Helpers

".text.html":

  "HTML: Template: scope":
    "prefix": "%"
    "body": "<% ${1} %>"

  "HTML: Template: Variable":
    "prefix": "%="
    "body": "<%= ${1} %>"

  "HTML: Template: if":
    "prefix": "%if"
    "body": """
    <% if (${1}) { %>
      ${2}
    <% } // endif %>
    """

  "HTML: Template: else":
    "prefix": "%ifels"
    "body": """
    <% if (${1}) { %>
      ${2}
    <% } else { %>
      ${3}
    <% } // endif %>
    """

  "HTML: Template: for":
    "prefix": "%for"
    "body": """
    <% for (var i = 0; i < ${1}.length; i++) { %>
      ${2}
    <% } // endfor %>
    """

  "HTML: Template: each":
    "prefix": "%each"
    "body": """
    <% _.each(${1}, function (item) { %>
      ${2:<%= item %>}
    <% }); // endeach %>
    """

  "HTML: Template: in":
    "prefix": "%in"
    "body": """
    <% for (var item in ${1}) { %>
      ${2}
    <% } // endfor %>
    """

  "HTML: Backbone Template":
    "prefix": "%template"
    "body": """
    <script type="text/x-template" id="${1}">
      <div>
        ${2}
      </div>
    </script>
    """
